{"version":3,"sources":["reducers/allocationReducer.js","reducers/componentsStateReducer.js","reducers/pidReducer.js","reducers/index.js","actions/types.js","actions/index.js","components/Button.js","components/AlgorithmList.js","layouts/Nav.js","layouts/Header.js","layouts/Footer.js","components/Task.js","components/PID.js","layouts/Aside.js","pages/Home.js","components/ChooseTask.js","components/TextInput.js","components/NumberInput.js","pages/CreatePIDs.js","helpers/preparePidsToAlgorithm.js","helpers/prepareDataToChart.js","helpers/addWaiting.js","helpers/barDataArray.js","pages/ShowChart.js","components/PIDTask.js","helpers/changePIDsToTaskList.js","pages/ShowSimulation.js","helpers/forStatistics.js","components/StatisticsItem.js","pages/ShowStatistics.js","pages/ErrorPage.js","layouts/Main.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","pids","algorithm","isWork","algorithmListShow","pidTasks","name","priority","combineReducers","allocation","state","action","type","payload","newPids","push","componentState","pid","value","index","newPidTasks","length","lastLetter","showAlgorithmList","Button","onClick","text","className","disabled","connect","algorithmText","showList","changeAlgorithm","algoritm","algorithms","map","key","to","exact","activeClassName","AlgorithmList","Header","title","Footer","Task","task","PID","tasks","id","resetPids","Home","editTaskPid","option","useState","isCPU","setCPU","isIO","setIO","onChange","checked","TextInput","placeholder","label","NumberInput","addTaskToPid","namePid","priorityPid","addPid","resetPid","console","log","e","target","preparePidsToAlgorithm","algorithmPids","sort","a","b","prepareDataToChart","data","result","i","record","cpuTask","ioTask","cpuPart","ioPart","j","waiting","addWaiting","newData","barDataArray","maxIO","maxCPU","io","cpu","currentCpu","currentIo","createArray","setData","dataBars","setDataBars","useEffect","prepareData","barDaraArray","layout","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stackId","fill","PIDTask","changePIDsToTaskList","tasksList","simulationWork","setTasks","addTaskToList","setTimeout","waitingALL","dataWithWaiting","forEach","item","tasksAll","numberOfTasks","cpuAll","numberOfcpu","ioAll","numberOfio","StatisticsItem","dataPids","setDataPids","Math","round","ErrorPage","Main","path","component","CreatePIDs","ShowSimulation","ShowChart","ShowStatistics","store","createStore","reducers","applyMiddleware","ReduxThunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.584d6ee1.chunk.js","sourcesContent":["import {\r\n  change_algorithm,\r\n  add_pid,\r\n  reset_pids,\r\n  simulation_work} from \"../actions/types\";\r\n\r\n\r\nconst INITIAL_STATE = {\r\n   pids:[],\r\n   algorithm:\"\",\r\n   isWork:false};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case change_algorithm:{\r\n      const {payload} = action;\r\n      return {...state,algorithm:payload};\r\n    }\r\n    case add_pid:{\r\n      const {payload} = action;\r\n      const newPids = [...state.pids];\r\n      newPids.push(payload);\r\n      return {...state,pids:newPids}\r\n    }\r\n    case reset_pids:{\r\n      return {...state,pids:INITIAL_STATE.pids};\r\n    }\r\n    case simulation_work:{\r\n      const{payload} = action;\r\n      return {...state, isWork:payload}\r\n    }\r\n    default:{\r\n      return state;\r\n    }\r\n  }\r\n};","import {show_algorithm_list} from \"../actions/types\";\r\n\r\n\r\nconst INITIAL_STATE = {algorithmListShow:false};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case show_algorithm_list:{\r\n      const algorithmListShow = !state.algorithmListShow;\r\n      return {...state,algorithmListShow};\r\n    }\r\n    default:{\r\n      return state;\r\n    }\r\n  }\r\n};","import {add_task_to_pid,edit_task_pid,name_pid,priority_pid,reset_pid} from \"../actions/types\";\r\n\r\n\r\nconst INITIAL_STATE = {pidTasks:[],name:\"\",priority:1};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n      case edit_task_pid:\r\n      {\r\n        const{value,index}=action.payload;\r\n        const newPidTasks= [...state.pidTasks];\r\n        newPidTasks[index]=value;\r\n        return {...state,pidTasks:newPidTasks};\r\n      }\r\n      case name_pid:{\r\n          const {payload} = action;\r\n          if(payload.length<10)\r\n          {\r\n            return {...state,name:payload};\r\n          }\r\n          return state;\r\n      }\r\n      case priority_pid:{\r\n        const {payload} = action;\r\n        const lastLetter = payload[payload.length-1];\r\n        if(lastLetter!==\"e\" && payload<=10 && payload>=1)\r\n        {\r\n            return {...state, priority:payload}\r\n        }\r\n        return state;\r\n      }\r\n      case reset_pid:{\r\n          return INITIAL_STATE;\r\n      }\r\n      case add_task_to_pid:\r\n      {\r\n            const{payload} = action;\r\n            const newPidTasks = [...state.pidTasks];\r\n            newPidTasks.push(payload);\r\n            return {...state,pidTasks:newPidTasks};\r\n      }\r\n    default:{\r\n      return state;\r\n    }\r\n  }\r\n};","import { combineReducers } from \"redux\";\r\nimport allocationReducer from \"./allocationReducer\";\r\nimport componentsStateReducer from \"./componentsStateReducer\";\r\nimport pidReducer from \"./pidReducer\";\r\n\r\nexport default combineReducers({\r\n        allocation:allocationReducer,\r\n        componentState: componentsStateReducer,\r\n        pid:pidReducer\r\n    })\r\n","export const change_algorithm = \"CHANGE_ALGORITHM\";\r\nexport const show_algorithm_list=\"SHOW_ALGORITHM_LIST\";\r\nexport const add_task_to_pid=\"ADD_TASK_TO_PID\";\r\nexport const edit_task_pid=\"EDIT_TASK_PID\";\r\nexport const name_pid=\"NAME_PID\";\r\nexport const priority_pid=\"PRIORITY_PID\";\r\nexport const reset_pid=\"RESET_PID\";\r\nexport const add_pid=\"ADD_PID\";\r\nexport const reset_pids=\"RESET_PIDS\";\r\nexport const simulation_work = \"SIMULATION_WORK\";\r\n","import {\r\n    change_algorithm,\r\n    show_algorithm_list,\r\n    add_task_to_pid,\r\n    edit_task_pid,\r\n    name_pid,\r\n    priority_pid,\r\n    reset_pid,\r\n    add_pid,\r\n    reset_pids,\r\n    simulation_work} from \"./types\";\r\n\r\nexport const changeAlgorithm = (algoritm) =>(\r\n    {\r\n        type:change_algorithm,\r\n        payload: algoritm\r\n    }\r\n)\r\nexport const showAlgorithmList = () =>(\r\n    {\r\n        type:show_algorithm_list,\r\n    }\r\n)\r\nexport const editTaskPid = (index,value)=>(\r\n    {\r\n        type:edit_task_pid,\r\n        payload:{index,value}\r\n    }\r\n)\r\nexport const addTaskToPid = () =>(\r\n    {\r\n        type:add_task_to_pid,\r\n        payload:\"CPU\"\r\n    }\r\n)\r\nexport const namePid = name =>(\r\n    {\r\n        type:name_pid,\r\n        payload:name\r\n    }\r\n)\r\nexport const priorityPid = priority =>(\r\n    {\r\n        type: priority_pid,\r\n        payload: priority\r\n    }\r\n)\r\nexport const resetPid = ()=>(\r\n    {\r\n        type:reset_pid,\r\n    }\r\n)\r\nexport const addPid = (pid) =>(\r\n    {\r\n        type:add_pid,\r\n        payload:pid\r\n    }\r\n)\r\nexport const resetPids = () =>(\r\n    {\r\n        type:reset_pids\r\n    }\r\n)\r\nexport const simulationWork = (isWork) =>(\r\n    {\r\n        type:simulation_work,\r\n        payload:isWork\r\n    }\r\n)\r\n","import React from 'react';\r\n\r\nconst Button = ({\r\n    onClick,\r\n    text,\r\n    className,\r\n    disabled}) => {\r\n    return (\r\n        <button \r\n        disabled={disabled}\r\n        onClick={onClick} \r\n        className={className}>\r\n        {text}\r\n        </button>\r\n    )\r\n}\r\n \r\nexport default Button;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {changeAlgorithm} from \"../actions/index\";\r\nimport {algorithms} from \"../settings.json\";\r\nimport Button from './Button';\r\nconst AlgoritmList = ({algorithmText,changeAlgorithm,showList}) => {\r\n    return ( \r\n        <div className=\"algorithm-list\">\r\n            {showList?\r\n            <ul className = \"algorithm-list__list\">\r\n                {algorithms.map((algorithm =>\r\n                <li key={algorithm} className=\"algorithm-list__item\">        <Button  \r\n                    text={algorithm} \r\n                    onClick={()=>{changeAlgorithm(algorithm)}}\r\n                    className=\r\n                    {\r\n                        algorithmText===algorithm\r\n                        ?\r\n                        \"button button--algorithm-list  button--active\"\r\n                        :\r\n                        \"button button--algorithm-list\"\r\n                    } \r\n                    />\r\n                </li>\r\n                 ))}\r\n            </ul>:null}\r\n        </div>\r\n    );\r\n}\r\n \r\nconst mapStateToProps = state =>{\r\n    return{\r\n        algorithmText: state.allocation.algorithm,\r\n        showList: state.componentState.algorithmListShow\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{changeAlgorithm})(AlgoritmList);","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {showAlgorithmList} from \"../actions/index\";\r\nimport AlgorithmList from \"../components/AlgorithmList\";\r\nimport Button from \"../components/Button\"; \r\nconst Nav = ({showAlgorithmList,isWork})=> {\r\n    return(\r\n        <nav className=\"navigation\">\r\n            <ul className=\"navigation__list\">\r\n                <li className=\"navigation__item\">\r\n                    <NavLink to=\"/\" exact activeClassName=\"navigation__link--active\"  className=\"navigation__link\">Home</NavLink>\r\n                </li>\r\n                <li className=\"navigation__item\">\r\n                    <NavLink to=\"/createPIDs\" exact activeClassName=\"navigation__link--active\" className=\"navigation__link\">Stwórz procesy</NavLink>\r\n                </li>\r\n                <li className=\"navigation__item\">\r\n                    <NavLink to=\"/showSimulation\" exact activeClassName=\"navigation__link--active\" className=\"navigation__link\">Pokaż symulację</NavLink>\r\n                </li>\r\n                <li className=\"navigation__item\">\r\n                    <NavLink to=\"/showStatistics\" exact activeClassName=\"navigation__link--active\" className=\"navigation__link\">Pokaż statystyki</NavLink>\r\n                </li>\r\n                <li className=\"navigation__item\">\r\n                    <NavLink to=\"/showChart\" exact activeClassName=\"navigation__link--active\" className=\"navigation__link\">Pokaż wykres</NavLink>\r\n                </li>\r\n                <li className=\"navigation__item navigation__item--special\"> \r\n                    <Button\r\n                    className=\"button button--navigation\"\r\n                    disabled={isWork}\r\n                    onClick = {()=>{showAlgorithmList()}}text=\"wybierz algorytm\"/>\r\n                    <AlgorithmList/>  \r\n                </li>\r\n            </ul>\r\n       \r\n        </nav>\r\n    )\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        isWork: state.allocation.isWork\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{showAlgorithmList})(Nav);","import React from 'react';\r\nimport Nav from \"./Nav\";\r\n\r\nconst Header = ({title}) =>{\r\n    return(\r\n        <header className=\"header\">\r\n            <h1 className=\"header__title\">\r\n                {title}\r\n            </h1>\r\n            <Nav/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () =>{\r\n    return(\r\n        <footer className=\"footer\">\r\n            <p className=\"footer__text\">Lorem</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\n\r\nconst Task = ({task}) => {\r\n    return (  \r\n        <li className=\"taskList__item\">\r\n            <p className=\"taskList__text\">{task}</p>\r\n        </li>\r\n    );\r\n}\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from \"../components/Task\";\r\n\r\nconst PID = ({name,tasks,priority,id}) => {\r\n    return (\r\n        <li className=\"pid\">\r\n            <p className=\"pid__name\">{name}({id})</p>\r\n            <p className=\"pid__priority\">priorytet: {priority}</p>\r\n            <ul className={\"pid__list\"}>\r\n                {tasks.map((task,index)=>(\r\n                <Task \r\n                key={index} \r\n                task={task}\r\n                />)\r\n                )}\r\n            </ul>\r\n        </li>\r\n      );\r\n}\r\n \r\nexport default PID;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {resetPids} from \"../actions/index\";\r\nimport Button from \"../components/Button\";\r\nimport PID from \"../components/PID\";\r\nconst Aside = ({pids,resetPids})=>{\r\n    return (\r\n        <aside className=\"aside\">\r\n            <ul className=\"aside__list\">\r\n                {pids.map(({name,tasks,priority,id})=>(\r\n                    <PID\r\n                    key={id}\r\n                    name={name}\r\n                    tasks={tasks}\r\n                    priority={priority}\r\n                    id={id}\r\n                    />\r\n                ))}\r\n            </ul>\r\n            {pids.length>0?\r\n            <Button \r\n            text=\"reset\"\r\n            onClick={resetPids}\r\n            className={\"button button--aside aside__button\"}\r\n            />\r\n            :null}\r\n        </aside>\r\n    );\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        pids:state.allocation.pids\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{resetPids})(Aside);","import React from 'react';\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n    <div className=\"home\"> \r\n        <h1 className=\"home__text\">HOME</h1>\r\n    </div>);\r\n}\r\n \r\nexport default Home;","import React,{useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {editTaskPid} from \"../actions/index\";\r\n\r\nconst ChooseTask = ({index,option,editTaskPid}) => {\r\n    \r\n    const [isCPU,setCPU] =useState(option===\"CPU\"?true:false);\r\n    const [isIO,setIO] =useState(option===\"IO\"?true:false);\r\n    return (\r\n        <div className=\"choose-task\">\r\n            <label className=\"choose-task__label\">\r\n                <input type=\"checkbox\" value=\"CPU\" className=\"choose-task__checkbox\" onChange={()=>{}} onClick={()=>{\r\n                    setCPU(true);\r\n                    setIO(false);\r\n                    editTaskPid(index,\"CPU\");\r\n                }}  checked={isCPU} />\r\n                <p className=\"choose-task__text\">CPU</p>\r\n            </label>\r\n            <label className=\"choose-task__label\">\r\n                <input type=\"checkbox\" value=\"IO\" className=\"choose-task__checkbox\" onChange={()=>{}} onClick={()=>{\r\n                    setCPU(false);\r\n                    setIO(true);\r\n                    editTaskPid(index,\"IO\");\r\n                }} checked={isIO} />\r\n                <p className=\"choose-task__text\">IO</p>\r\n            </label>\r\n        </div>\r\n      );\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{editTaskPid})(ChooseTask);","import React from 'react';\r\n\r\nconst TextInput = ({\r\n    onChange, \r\n    placeholder,\r\n    label,\r\n    className,\r\n    value\r\n}) => {\r\n    return (             \r\n    <label>\r\n        <p>{label}</p>\r\n            <input type=\"text\"\r\n            placeholder={placeholder}\r\n            onChange = {onChange}\r\n            className={className}\r\n            value={value}\r\n            />\r\n    </label> \r\n    );\r\n}\r\n \r\nexport default TextInput;","import React from 'react';\r\n\r\nconst NumberInput = ({\r\n    onChange, \r\n    label,\r\n    className,\r\n    value\r\n}) => {\r\n    return (             \r\n    <label>\r\n        <p>{label}</p>\r\n            <input type=\"number\"\r\n            onChange = {onChange}\r\n            className={className}\r\n            value={value}\r\n            />\r\n    </label> \r\n    );\r\n}\r\n \r\nexport default NumberInput;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {addTaskToPid,namePid,priorityPid,resetPid,addPid} from \"../actions/index\";\r\nimport Button from \"../components/Button\";\r\nimport ChooseTask  from \"../components/ChooseTask\";\r\nimport TextInput from \"../components/TextInput\";\r\nimport NumberInput from \"../components/NumberInput\";\r\n\r\nconst CreatePIDs = ({tasks,addTaskToPid,id,name,priority,namePid,priorityPid,addPid,resetPid}) =>{\r\n    console.log(name);\r\n    return (\r\n \r\n        <div className=\"create-pid\">\r\n            <h3 \r\n            className={\"create-pid__id\"}\r\n            >\r\n            {\"id: \" + id}\r\n            </h3>\r\n            <TextInput\r\n            placeholder=\"nazwa procesu\"\r\n            onChange={(e)=>namePid(e.target.value)}\r\n            label=\"nazwa procesu\"\r\n            value={name}\r\n            className=\"create-pid__input\"\r\n            />\r\n            <NumberInput\r\n            label=\"Priorytet(1-10)\"\r\n            value={priority}\r\n            onChange = {(e)=>priorityPid(e.target.value)}\r\n            className=\"create-pid__input\"\r\n            />\r\n            <ul className=\"create-pid__list\">\r\n                {tasks.map((task,index)=>\r\n                <li\r\n                className=\"create-pid__item\" \r\n                key={index}>\r\n                <ChooseTask \r\n                option={task} \r\n                index={index}/>\r\n                </li>)}\r\n            </ul>\r\n            <div className=\"create-pid__button-container\">\r\n                <Button text=\"dodaj zadanie\" \r\n                className={\"button button--create-pid\"}\r\n                onClick={()=>addTaskToPid()}/>\r\n                {tasks.length>0?\r\n                    <>\r\n                        <Button \r\n                        text=\"dodaj proces\" \r\n                        className=\"button button--create-pid\"\r\n                        onClick={()=>{\r\n                            const pid = {id,name,priority,tasks};\r\n                            addPid(pid);\r\n                            resetPid();}}\r\n                            />\r\n                            <Button\r\n                            text=\"anuluj proces\"\r\n                            className=\"button button--create-pid\"\r\n                            onClick={()=>{\r\n                                resetPid();\r\n                            }}\r\n                            />\r\n                    </>\r\n                :null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        tasks: state.pid.pidTasks,\r\n        id: state.allocation.pids.length,\r\n        name: state.pid.name,\r\n        priority: state.pid.priority\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{\r\n    addTaskToPid,\r\n    namePid,\r\n    priorityPid,\r\n    addPid,\r\n    resetPid\r\n})(CreatePIDs);","const preparePidsToAlgorithm =  (pids,algorithm) => {\r\n    let algorithmPids;\r\n    switch(algorithm)\r\n    {\r\n        case \"Priority\":\r\n        {\r\n            algorithmPids = [...pids];\r\n            algorithmPids.sort((a,b)=>{\r\n                return b.priority-a.priority;\r\n            });\r\n        }\r\n        break;\r\n        case \"SJF\":\r\n        {\r\n            algorithmPids = [...pids];\r\n            algorithmPids.sort((a,b)=>{\r\n                return a.tasks.length - b.tasks.length;\r\n            });\r\n        }\r\n        break;\r\n        case \"FCFS\":\r\n        default:\r\n        {\r\n            algorithmPids = [...pids];\r\n        }\r\n        break;\r\n    }\r\n    return algorithmPids;\r\n}\r\n\r\nexport default preparePidsToAlgorithm;","const prepareDataToChart = (data) =>{\r\n    let result=[];\r\n    for (let i=0;i<data.length;i++) {\r\n        const {tasks} = data[i];\r\n        let record = {};\r\n        let cpuTask=0;\r\n        let ioTask=0;\r\n        let cpuPart=0;\r\n        let ioPart=0;\r\n        for (let j=0;j<tasks.length;j++) {\r\n            if(tasks[j]===\"CPU\")\r\n            {\r\n                if(ioTask>0)\r\n                {\r\n                    ioPart++;\r\n                    record={...record,[\"IO\"+ioPart]:ioTask}\r\n                    ioTask=0;\r\n                }\r\n                    cpuTask++;    \r\n    \r\n            }\r\n            else if(tasks[j]===\"IO\")\r\n            {\r\n                if(cpuTask>0)\r\n                {\r\n                    cpuPart++;\r\n                    record={...record,[\"CPU\"+cpuPart]:cpuTask}\r\n                    cpuTask=0;\r\n                }\r\n                    ioTask++; \r\n            }\r\n            if(j===tasks.length-1)\r\n            {\r\n                if(tasks[j]===\"CPU\")\r\n                {\r\n                    cpuPart++;\r\n                    record={...record,[\"CPU\"+cpuPart]:cpuTask}\r\n                }\r\n                else\r\n                {\r\n                    ioPart++;\r\n                    record={...record,[\"IO\"+ioPart]:ioTask}\r\n                }\r\n            }\r\n        }\r\n        result.push({id:data[i].id,name:data[i].name,...record,waiting:data[i].waiting});\r\n    }\r\n    return result;\r\n}\r\n\r\nexport default prepareDataToChart;","const addWaiting = (data)=>{\r\n    const newData=[];\r\n    for(let i=0;i<data.length;i++)\r\n    {\r\n        let waiting = 0;\r\n        for (let j=0; j<i;j++)\r\n        {\r\n            waiting+=data[j].tasks.length;\r\n        }\r\n        newData.push({...data[i],waiting});\r\n    }\r\n    return newData;\r\n}\r\nexport default addWaiting;","const createArray=(io,cpu)=>{\r\n    const result = [];\r\n    let currentCpu=0;\r\n    let currentIo=0;\r\n    while(currentCpu+currentIo<io+cpu)\r\n    {\r\n        if(currentCpu<cpu)\r\n        {\r\n            currentCpu++;\r\n            result.push({key:\"CPU\"+currentCpu,type:\"CPU\"});\r\n        }\r\n        if(currentIo<io)\r\n        {\r\n            currentIo++;\r\n            result.push({key:\"IO\"+currentIo, type:\"IO\"});\r\n        }\r\n    }\r\n    result.push({key:\"PCU\"+(currentCpu+1),type:\"CPU\"});\r\n    result.push({key:\"IO\"+(currentIo+1), type:\"IO\"});\r\n    console.log(result);\r\n    return result;\r\n}\r\n\r\nconst barDataArray = (data) =>{\r\n \r\n    let maxIO=0;\r\n    let maxCPU=0;\r\n    for (let i=0;i<data.length;i++) {\r\n        const {tasks} = data[i];\r\n        let cpuTask=0;\r\n        let ioTask=0;\r\n        let cpuPart=0;\r\n        let ioPart=0;\r\n        for (let j=0;j<tasks.length;j++) {\r\n            if(tasks[j]===\"CPU\")\r\n            {\r\n                if(ioTask>0)\r\n                {\r\n                    ioPart++;\r\n                    ioTask=0;\r\n                }\r\n                    cpuTask++;    \r\n    \r\n            }\r\n            else if(tasks[j]===\"IO\")\r\n            {\r\n                if(cpuTask>0)\r\n                {\r\n                    cpuPart++;\r\n                    cpuTask=0;\r\n                }\r\n                    ioTask++; \r\n            }\r\n            if(j===tasks.length-1)\r\n            {\r\n                if(tasks[j]===\"CPU\")\r\n                {\r\n                    cpuPart++;\r\n                }\r\n                else\r\n                {\r\n                    ioPart++;\r\n                }\r\n            }\r\n        }\r\n        if(ioPart>maxIO)\r\n        {\r\n            maxIO=ioPart;\r\n        }\r\n        if(cpuPart>maxCPU)\r\n        {\r\n            maxCPU=cpuPart;\r\n        }\r\n    }\r\n    return createArray(maxIO,maxCPU);\r\n}\r\n\r\nexport default barDataArray;","import React,{ PureComponent,useEffect,useState } from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    Cell,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n  } from 'recharts';\r\nimport preparePidsToAlgorithm from \"../helpers/preparePidsToAlgorithm\";\r\nimport prepareDataToChart from \"../helpers/prepareDataToChart\";\r\nimport addWaiting from \"../helpers/addWaiting\";\r\nimport barDaraArray from \"../helpers/barDataArray\";\r\n\r\n\r\n\r\nconst ShowChart = ({pids,algorithm}) => {\r\n    const[data,setData]=useState([]);\r\n    const[dataBars,setDataBars]=useState([]);\r\n    useEffect(()=>{\r\n        if(pids.length>0){\r\n            let prepareData;\r\n            prepareData=preparePidsToAlgorithm(pids,algorithm);\r\n            setDataBars(barDaraArray(prepareData));\r\n            prepareData=addWaiting(prepareData);\r\n            prepareData = prepareDataToChart(prepareData);\r\n            console.log(algorithm)\r\n            setData(prepareData);\r\n        }\r\n    },[setData,algorithm,setDataBars])\r\n\r\n      const colorCPU=\"#FE9E76\";\r\n      const colorIO=\"#F5E027\";\r\n    return (\r\n        <div className=\"chart\">\r\n                {\r\n                    pids.length===0\r\n                    ?\r\n                    <h3 className=\"error error--big\">Proszę stworzyć proces</h3>\r\n                    :\r\n                        algorithm===\"\"\r\n                        ?\r\n                    <h3 className=\"error error--big\">Proszę wybrać algorytm</h3>\r\n                    :\r\n                    \r\n                    <BarChart\r\n                    layout=\"vertical\"\r\n                    width={700}\r\n                    height={500}\r\n                    data={data}\r\n                    margin={{\r\n                    top: 20, right: 30, left: 20, bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis type=\"number\" />\r\n                    <YAxis type=\"category\" dataKey=\"id\"  />\r\n                    <Tooltip />\r\n                    <Bar dataKey=\"waiting\" stackId=\"a\" fill=\"rgba(0,0,0,0)\" />\r\n                    {dataBars.map(({key,type})=>(\r\n                        <Bar dataKey={key} stackId=\"a\" fill={type===\"CPU\"?colorCPU:colorIO} />\r\n                    ))} \r\n                </BarChart>\r\n            } \r\n\r\n        </div>\r\n    )\r\n}\r\n const mapStateToPros = state =>{\r\n     return {\r\n        pids:state.allocation.pids,\r\n        algorithm:state.allocation.algorithm,\r\n     }\r\n }\r\nexport default connect(mapStateToPros,{})(ShowChart);","import React from 'react'\r\n\r\nconst PIDTask = ({name,task,priority,id}) => {\r\n    return (\r\n        <li className=\"pid-task\">\r\n            <p className=\"pid-task__name\">{name+\"(\"+id+\")\"}</p>\r\n            <p className=\"pid-task__priority\">{\"prioritet: \"+priority}</p>\r\n            <p className=\"pid-task__task\">{task}</p>\r\n        </li>\r\n      );\r\n}\r\n \r\nexport default PIDTask;","const changePIDsToTaskList = (pidTasks)=>{\r\n    const tasksList=[];\r\n    for(let i =0;i<pidTasks.length;i++)\r\n    {\r\n        for(let j = 0;j<pidTasks[i].tasks.length;j++)\r\n        {\r\n            tasksList.push(\r\n                {\r\n                    task:pidTasks[i].tasks[j],\r\n                    pid: pidTasks[i].name,\r\n                    id: pidTasks[i].id,\r\n                    priority: pidTasks[i].priority\r\n                })\r\n        }\r\n    } \r\n    return tasksList;\r\n}\r\n\r\nexport default changePIDsToTaskList;","import React,{useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    simulationWork,\r\n    showAlgorithmList} from \"../actions/index\";\r\nimport Button from \"../components/Button\";\r\nimport PIDTask from \"../components/PIDTask\";\r\nimport preparePidsToAlgorithm from \"../helpers/preparePidsToAlgorithm\";\r\nimport changePIDsToTaskList from \"../helpers/changePIDsToTaskList\";\r\n\r\n\r\nconst ShowSimulation = ({\r\n    pids,\r\n    simulationWork,\r\n    isWork,\r\n    algorithm,\r\n    algorithmListShow,\r\n    showAlgorithmList}) => {\r\n    const [tasks,setTasks]=useState([]);\r\n    let tasksList=[];\r\n    const addTaskToList=()=>{\r\n        tasks.push(tasksList[tasks.length]);\r\n        setTasks([...tasks]); \r\n        if(tasks.length<tasksList.length)\r\n        {\r\n            setTimeout(()=>{addTaskToList()},200);\r\n        }\r\n    }\r\n    const startSimulationHandle =()=>{\r\n            console.log(tasks);\r\n            simulationWork(!isWork);\r\n            if(algorithmListShow)\r\n            {\r\n                showAlgorithmList();\r\n            }\r\n            if(!isWork)\r\n            {\r\n                const pidTasks = preparePidsToAlgorithm(pids,algorithm);\r\n                console.log(pidTasks);\r\n                tasksList = changePIDsToTaskList(pidTasks);\r\n                addTaskToList();\r\n            }   \r\n            if(isWork)\r\n            {\r\n                setTasks([]);\r\n                simulationWork(!isWork);\r\n            }\r\n    }\r\n    return (\r\n    <div className=\"simulation\">\r\n    {\r\n        pids.length===0\r\n        ?\r\n        <h3 className=\"error error--big\">Proszę stworzyć proces</h3>\r\n        :\r\n            algorithm===\"\"\r\n            ?\r\n        <h3 className=\"error error--big\">Proszę wybrać algorytm</h3>\r\n        :\r\n        <Button\r\n        text={isWork?\r\n            \"resetuj symulacje\"\r\n            :\"Uruchom symulacje\"}\r\n        className=\"button button--simulation\"\r\n        onClick={startSimulationHandle}\r\n        />\r\n    }\r\n        <ul className=\"simulation__list\">\r\n             {tasks.map(({task,pid,id,priority},index)=>(\r\n            <PIDTask\r\n            key={id+\":\"+index}\r\n            name={pid}\r\n            task={task}\r\n            id={id}\r\n            priority={priority}\r\n            />))}\r\n        </ul>\r\n    \r\n    </div>\r\n    );\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        pids:state.allocation.pids,\r\n        algorithm:state.allocation.algorithm,\r\n        isWork: state.allocation.isWork,\r\n        algorithmListShow: state.componentState.algorithmListShow\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{simulationWork,showAlgorithmList})(ShowSimulation);","import addWaiting from \"./addWaiting\";\r\n\r\nexport const waitingALL = (data) =>{\r\n    const dataWithWaiting = addWaiting(data);\r\n    let waiting = 0;\r\n    dataWithWaiting.forEach((item)=>{\r\n            waiting += item.waiting;\r\n    });\r\n    return waiting;\r\n}\r\n export const tasksAll = (data) =>{\r\n    let numberOfTasks = 0;\r\n    data.forEach(({tasks})=>{\r\n        numberOfTasks += tasks.length;\r\n    })\r\n    return numberOfTasks;\r\n}\r\nexport const cpuAll = (data) =>{\r\n    let numberOfcpu = 0;\r\n    data.forEach(({tasks})=>{\r\n        tasks.forEach(task=>{\r\n            if(task===\"CPU\")\r\n            {\r\n                numberOfcpu++;\r\n            }\r\n        })\r\n    })\r\n    return numberOfcpu;\r\n}\r\nexport const ioAll = (data) =>{\r\n    let numberOfio = 0;\r\n    data.forEach(({tasks})=>{\r\n        tasks.forEach(task=>{\r\n            if(task===\"IO\")\r\n            {\r\n                numberOfio++;\r\n            }\r\n        })\r\n    })\r\n    return numberOfio;\r\n}","import React from 'react';\r\nimport {\r\n    cpuAll,\r\n    ioAll} from \"../helpers/forStatistics\";\r\n\r\nconst StatisticsItem = ({name,id,waiting,tasks,dataPids}) => {\r\n    return ( \r\n        <li className=\"statistics__item\">\r\n        <p className=\"statistics__text\">{name}({id})</p>\r\n        <p className=\"statistics__text\">waiting: {waiting}</p>\r\n        <p className=\"statistics__text\">response: {waiting}</p>\r\n        <p className=\"statistics__text\">GPU: {cpuAll([{tasks}])/cpuAll(dataPids)*100}%</p>\r\n        <p className=\"statistics__text\">IO: {ioAll([{tasks}])/ioAll(dataPids)*100}%</p>\r\n        <p className=\"statistics__text\">Turnaround: {tasks.length+waiting}</p>\r\n    </li>\r\n     );\r\n}\r\n \r\nexport default StatisticsItem;","import React,{useEffect,useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    tasksAll,\r\n    waitingALL,\r\n    cpuAll} from \"../helpers/forStatistics\";\r\nimport addWaiting from \"../helpers/addWaiting\";\r\nimport preparePidsToAlgorithm from \"../helpers/preparePidsToAlgorithm\";\r\nimport StatisticsItem from \"../components/StatisticsItem\";\r\nconst ShowStatistics = ({pids,algorithm}) => {\r\n    const[dataPids,setDataPids]=useState(pids);\r\n    useEffect(()=>{\r\n        setDataPids(preparePidsToAlgorithm(pids,algorithm));\r\n    },[algorithm,setDataPids,pids])\r\n    return (\r\n        <div className=\"statistics\">\r\n                    {\r\n                    pids.length===0\r\n                    ?\r\n                    <h3 className=\"error error--big\">Proszę stworzyć proces</h3>\r\n                    :\r\n                        algorithm===\"\"\r\n                        ?\r\n                    <h3 className=\"error error--big\">Proszę wybrać algorytm</h3>\r\n                    :\r\n                    <>\r\n                        <ul className=\"statistics__list\">\r\n                            {addWaiting(dataPids).map(({waiting,tasks,id,name})=>(\r\n                                <StatisticsItem\r\n                                key={id}\r\n                                id={id}\r\n                                name={name}\r\n                                waiting={waiting}\r\n                                tasks={tasks}\r\n                                dataPids={dataPids}\r\n                                />\r\n                            ))}\r\n                        </ul>\r\n                        <div className=\"statistics__container\">\r\n                            <p className=\"statistics__text statistics__text--important\">Avg. Response time: {Math.round(waitingALL(dataPids)/dataPids.length*100)/100}</p>\r\n                            <p className=\"statistics__text statistics__text--important\">Avg. Waiting time: {Math.round(waitingALL(dataPids)/dataPids.length*100)/100}</p>\r\n                            <p className=\"statistics__text statistics__text--important\">Avg. Turnaround time: {tasksAll(dataPids)/dataPids.length}</p>\r\n                            <p className=\"statistics__text statistics__text--important\">Efficienc: {cpuAll(dataPids)/tasksAll(dataPids)*100}%</p>\r\n                            <p className=\"statistics__text statistics__text--important\">Throughtput: {dataPids.length/tasksAll(dataPids)}</p>\r\n                        </div>\r\n                    </>\r\n                }\r\n        </div>\r\n    )\r\n}\r\n \r\nconst mapStateToPros = state =>{\r\n    return {\r\n       pids:state.allocation.pids,\r\n       algorithm:state.allocation.algorithm,\r\n    }\r\n}\r\nexport default connect(mapStateToPros,{})(ShowStatistics);","import React from 'react';\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <div className=\"error\">\r\n            <h2 className=\"error__text\">Przepraszamy strona nie znalezniona</h2>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default ErrorPage;","import React from 'react';\r\nimport {Route,Switch}  from \"react-router-dom\";\r\nimport Aside from \"./Aside\";\r\nimport Home from \"../pages/Home\";\r\nimport CreatePIDs from \"../pages/CreatePIDs\";\r\nimport ShowChart from \"../pages/ShowChart\";\r\nimport ShowSimulation from \"../pages/ShowSimulation\";\r\nimport ShowStatistics from \"../pages/ShowStatistics\";\r\nimport ErrorPage from \"../pages/ErrorPage\";\r\n\r\nconst Main = () =>{\r\n    return (\r\n        <main className=\"main\">\r\n            <Aside/>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Home}/>\r\n                <Route path=\"/createPIDs\" exact component={CreatePIDs}/>\r\n                <Route path=\"/showSimulation\" exact component={ShowSimulation}/>\r\n                <Route path=\"/showChart\" exact component={ShowChart}/>\r\n                <Route path=\"/showStatistics\" exact component={ShowStatistics}/>\r\n                <Route component={ErrorPage}/>\r\n            </Switch>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {createStore,applyMiddleware} from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\nimport Header from \"./layouts/Header\";\nimport Footer from \"./layouts/Footer\";\nimport Main from \"./layouts/Main\";\nimport \"./css/index.min.css\";\n\nconst store = createStore(reducers,{},applyMiddleware(ReduxThunk));\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Provider store = {store}>\n      <div className=\"App\">\n        <Header title = {\"CPU Allocation\"}/>\n        <Main/>\n        <Footer/>\n      </div>\n    </Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}